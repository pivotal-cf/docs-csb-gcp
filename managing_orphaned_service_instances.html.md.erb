---
title: Managing Orphaned Service Instances Cloud Service Broker for GCP
owner: Cloud Service Broker
---

<strong><%= modified_date %></strong>

## Introduction

This topic is a comprehensive guide for using Tanzu Cloud Service Broker
for GCP if you have service instances that belong to deactivated plans.
It will:

- Help you identify and manage instances that have become orphaned due to plan
  deactivation, ensuring that these instances remain secure and functional.
- Raise awareness of the importance of maintaining security standards and minimizing the attack surface for orphaned service
  instances.
- Give you practical strategies for handling these instances, including migration and transitioning to user-defined
  instances, in light of changes in service plan support and available features.
- Discuss the implications of plan deactivation on your service instances and the necessary
  steps to prevent potential service disruptions or security vulnerabilities.
- Guide you through checking for orphaned service instances by using specific command-line tools.


## Essential commands for orphaned instance management

This section provides a concise summary of the essential commands and steps required for detecting orphaned service
instances and database maintenance in the Tanzu Cloud Service Broker for GCP (CSB) and Cloud Foundry environments.

### Detecting orphaned service instances

1. **Install the `upgrade-all-services` CLI plug-in** by running:

      ```shell
      cf install-plugin -r CF-Community "UpgradeAllServices"
      ```

2. **Check for orphaned instances by using the plug-in**. Run this command to identify instances linked to deactivated plans:

      ```shell
      cf upgrade-all-services <broker_name> -check-deactivated-plans
      ```

3. **Review logs**: Review logs generated by the plug-in to identify any instances that require attention.

### Database purging

1. **Purging orphaned service instances**:
    - If you decide to remove orphaned instances, use the `cf purge-service-instance` command for each instance.
    - Example command:

      ```shell
      cf purge-service-instance <service_instance_name>
      ```

### Important points

- Always verify the current environment and service instance status before performing any purge operations.
- See the preceding sections for more context and instructions related to these commands and maintenance
  activities.

## Section 1: Overview of orphaned service instances

In the context of the CSB for GCP and Cloud Foundry environments, it's essential to understand what constitutes orphaned
service instances, why they occur, and the best practices for managing them.

### What is an orphaned service instance?

- **Definition**: An orphaned service instance refers to a service instance that Cloud Foundry recognizes as part of the CSB, but
  for which the CSB lacks the necessary information to manage effectively.
- **Implications**: Having orphaned instances in your Cloud Foundry environment can lead to challenges in manageability,
  upgradeability, agility, and security:
    - **Manageability**: These instances cannot have their configurations changed when required.
    - **Upgradeability**: These instances cannot be upgraded when required.
    - **Agility**: Management of these instances can become critical at inopportune moments.
    - **Security**: Inability to manage these instances can pose significant security risks, especially in situations
      requiring immediate response.

### Why do orphaned instances exist?

- **Service removal**: Instances can become orphaned due to the removal of the service to which they belong, either for
  strategic reasons or other considerations.
- **Plan removal**: Instances can become orphaned due to the removal of plans, either for strategic reasons or other
  considerations.
- **Custom plan changes**: Upgrades in the CSB can lead to the removal of old custom plans, which can also cause
  orphaned instances.
- **Plan ID changes**: Altering the Plan ID in the service catalog can lead to the treatment of existing resources as
  different, resulting in orphaned instances. This is because the CSB views the modified plan ID as a new resource,
  disconnecting it from its original configuration and management context.

### Recommended actions for orphaned instances

- **Regular health checks**: Consistently monitor your Cloud Foundry environment for orphaned instances.
    - For instances related to unavailable custom plans, see the upgrade instructions specific to those plans and
      CSB version.
    - If plans were removed for other reasons, consider manual data migration. Reference the migration examples in the
      CSB documentation for guidance.
- **Database management**: Periodically purge the Cloud Foundry database to remove stale or irrelevant data.
- **Do not ignore orphaned instances**:
    - **Upgrade challenges**: Ignoring orphaned instances during CSB updates can lead to a non-healthy environment.
      Subsequent upgrade instructions for custom plans related to orphaned instances can become ineffective,
      necessitating manual data migration.

## Section 2: Identifying and managing orphaned service instances

This section provides guidance on identifying service instances that have become orphaned in the CSB for GCP and Cloud Foundry
environments.
Addressing these instances is crucial for maintaining security, manageability, upgradeability, and
agility.

### Identifying orphaned service instances

- **Using CLI tools**: Utilize Cloud Foundry CLI tools to identify orphaned instances.
    - **CLI Cloud Foundry `upgrade-all-services` plug-in - Flag `-check-deactivated-plans`**: This specific flag can be used to
      check for instances linked to deactivated plans.
    - See documentation for more information:
        - [Cloud Foundry CLI Reference Guide - Install CLI Plugin](https://cli.cloudfoundry.org/en-US/v7/install-plugin.html).
        - [Cloud Foundry Documentation - Using a Cloud Foundry CLI Plugin](https://docs.cloudfoundry.org/cf-cli/use-cli-plugins.html).
        - [Cloud Foundry Community - Cloud Foundry CLI UpgradeAllServices Plugin](https://plugins.cloudfoundry.org/#UpgradeAllServices).
        - [UpgradeAllServices CLI Plugin on GitHub - Flags](https://github.com/cloudfoundry/upgrade-all-services-cli-plugin).
    - **Plug-in Installation**: To further clarify the installation of the plug-in, the following code example is provided:

      ```shell
      # Example code to demonstrate plugin installation
      cf install-plugin -r CF-Community "UpgradeAllServices"
      ```

    - **Example of execution**: To further clarify the use of the plug-in, the following code example is provided:

      ```shell
      # Example code to demonstrate plugin usage
      cf upgrade-all-services <broker_name> -check-deactivated-plans
      ```

    - **Example of log**: To further clarify the use of the plug-in, the following execution example is provided:

      ```shell
      âœ“ cf upgrade-all-services csb-broker-dev -check-deactivated-plans                                              
      2024-01-16T14:34:43Z: discovering service instances for broker: csb-broker-dev
      2024-01-16T14:34:43Z: skipping instance: "bucket-dev" guid: "1fe84e95-21c0-4acd-9bd9-6f2796971e46" Deactivated Plan: "default" Offering: "csb-google-storage-bucket" Offering guid: "837f5ff6-5765-44a0-8b78-d7e3ebc8d428" Upgrade Available: false Last Operation Type: "create" State: "succeeded"
      upgrade-all-services plugin failed: discovered deactivated plans associated with instances. Review the log to collect information and restore the deactivated plans or create user provided services
      ```

- **Revision of logs from previous installations**: When installing the Tile, Cloud Foundry logs a message when it detects
  instances created with plans that are not present in the CSB catalog.
    - **Example of log**:

      ```shell
      Warning: Service plans are missing from the broker's catalog (https://YOUR_CLOUD_SERVICE_BROKER_URL/v2/catalog) but can not be removed from Cloud Foundry while instances exist. The plans have been deactivated to prevent users from attempting to provision new instances of these plans. ....
      ``` 

## Section 3: Strategies for handling orphaned instances

Section 3 outlines the steps and strategies necessary for effectively managing and resolving issues
related to orphaned service instances in CSB for GCP and Cloud Foundry environments.

### Steps for addressing orphaned instances

1. **Conduct a health check of your Cloud Foundry environment**:
    - Regularly monitor your Cloud Foundry environment for orphaned instances.
    - Follow specific upgrade instructions if the orphaned instances are related to custom plans.
    - For instances orphaned due to other reasons, plan a manual migration, using the documentation as a reference.

2. **Database maintenance**:
    - Periodically purge the Cloud Foundry database to maintain a clean and efficient environment.
        - Orphaned service instances that you do not want to manage with the CSB must be deleted from the Cloud Foundry database.
    - For more information about deleting orphaned service instances, see [How to delete orphaned service instances derived from service brokers in Operations Manager](https://community.pivotal.io/s/article/How-to-delete-orphaned-service-instances-derived-from-service-brokers?language=en_US).
    - For more information about deleting orphaned service instances, see the Cloud Foundry article, [Purge a Service Instance](https://docs.cloudfoundry.org/services/managing-service-brokers.html#purge-service-instance).
    - **Example of execution**: `cf purge-service-instance mysql-dev`

1. **Avoiding old workarounds**:
    - Do not attempt to rejoin instances to the broker by recreating plans. This method is outdated and is no longer
      supported, especially with the removal of unsupported Terraform binaries from the broker.

### Migrating orphaned instances

- **Creating new instances**:
    - Migrate data by creating new instances in the broker.
    - See migration guidelines for detailed steps:
        - [Migration Guidelines for MySQL Instances](./gcp-mysql-migration.html.md.erb)
        - [Migration Guidelines for PostgreSQL Instances](./gcp-postgres-migration.html.md.erb)
        - [Migration Guidelines for Google Storage Bucket Instances](./gcp-storage-migration.html.md.erb)

- **Moving to user-provided instances**:
    - Alternatively, consider moving orphaned instances to user-defined instances.
    - Manage these directly through the IaaS console for better control and customization.
    - See the following documentation for more information:
        - [Cloud Foundry CLI Reference Guide for creating user-provided services instances](https://cli.cloudfoundry.org/en-US/v8/create-user-provided-service.html).
        - [TAS documentation for user-provided service instances](https://docs.vmware.com/en/VMware-Tanzu-Application-Service/5.0/tas-for-vms/services-user-provided.html).
        - [Cloud Foundry DevGuide for user-provider service instances](https://docs.cloudfoundry.org/devguide/services/user-provided.html).

### Implications of ignoring orphaned instances

- Neglecting orphaned instances during CSB updates can lead to a non-healthy environment.
- Upgrade instructions for custom plans related to orphaned instances can become ineffective, necessitating manual
  migration.

## Summary

We have addressed the crucial aspects of managing orphaned service instances within the
Tanzu Cloud Service Broker for GCP and Cloud Foundry environments. The key takeaways include:

### The significance of orphaned service instances

- **Orphaned instances defined**: Disconnected service instances are those recognized by Cloud Foundry but cannot be managed by the
  CSB due to missing information.
- **Risks and challenges**: These instances pose significant risks in terms of manageability, upgradeability, agility,
  and security. Their presence can hinder system updates, configuration changes, and timely response to security
  threats.

### Proactive steps and best practices

- **Identifying instances**: Regularly use Cloud Foundry CLI tools to check for orphaned instances, especially use
  the `UpgradeAllServices` plug-in with the `-check-deactivated-plans` flag.
- **Root causes**: Instances become orphaned primarily due to plan removals, changes in custom plans, or by altering plan
  IDs.
- **Effective management**: Involves regular health checks, database purging, and avoiding outdated methods like
  recreating plans to rejoin instances to the broker.

### Migration and resolution strategies

- **Migrating orphaned instances**: Emphasize migrating data to new instances within the broker or moving to
  user-provided instances, with detailed guidelines provided in the CSB documentation.
- **Avoiding complications**: Ignoring orphaned instances, especially during CSB updates, can lead to an unhealthy
  environment and complicated upgrade processes.

### Final thoughts

Managing orphaned service instances is an essential aspect of maintaining a secure, agile, and manageable cloud
environment. By following these strategies and guidelines, you can ensure that your Cloud Foundry
environments remain robust and responsive to changing needs and potential security risks.

For further information and updates, see:

- [Cloud Foundry Managing Service Brokers](https://docs.cloudfoundry.org/services/managing-service-brokers.html)
- [Cloud Service Broker GitHub Repository - Docs](https://github.com/cloudfoundry/cloud-service-broker/tree/main/docs)
- [Open Service Broker API Specification](https://github.com/openservicebrokerapi/servicebroker/blob/v2.14/spec.md)
    - [Open Service Broker API Specification - Catalog Management](https://github.com/openservicebrokerapi/servicebroker/blob/v2.14/spec.md#catalog-management)
