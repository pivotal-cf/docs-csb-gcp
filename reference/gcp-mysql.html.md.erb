---
title: Google MySQL Reference (Beta)
owner: Cloud Service Broker
---

<strong><%= modified_date %></strong>

This topic gives you reference information about the Google MySQL service (csb-google-mysql).
It details the plans, configuration parameters, and binding credentials.

<p class="note warning">
  <strong>Warning: </strong>
  The Google MySQL service offering is currently in beta and is intended for evaluation and test purposes only.
  Do not use this product in a production environment.
</p>

## <a id="plans"></a> Plans

The table below lists the plans for Google MySQL:

| Plan   | Description                                                             |
|--------|-------------------------------------------------------------------------|
| small  | MySQL v8.0, minimum 2 cores, minimum 4&nbsp;GB RAM, 10&nbsp;GB storage  |
| medium | MySQL v8.0, minimum 4 cores, minimum 8&nbsp;GB RAM, 10&nbsp;GB storage  |
| large  | MySQL v8.0, minimum 8 cores, minimum 16&nbsp;GB RAM, 20&nbsp;GB storage |

## <a id="plans-config"></a> Plan Configuration Parameters

When configuring <%= vars.product_short %> you can add additional plans.
For how to configure plans, see
[Configure Services with Cloud Service Broker for GCP](../installing-with-gcp.html#services).

The following table lists parameters which can only be configured for additional plans:

| Parameter Name    | Values                                                                           | Default |
|-------------------|----------------------------------------------------------------------------------|---------|
| `name`*           | The plan name                                                                    | _n/a_   |
| `id`*             | A unique GUID                                                                    | _n/a_   |
| `description`*    | Description of the new plan                                                      | _n/a_   |
| `display_name`    | Name to use when displaying plan in marketplace                                  | _n/a_   |
| `free`            | When false, Service Instances of this Service Plan have a cost                   | true    |
| `bindable`        | Specifies whether Service Instances of the Service Plan can bind to applications | true    |
| `plan_updateable` | Whether the Plan supports upgrade/downgrade/sidegrade to another version         | true    |

<sup>*</sup> Required

You can also add any of the configuration parameters listed in the [parameters](#parameters) section to your plan.

To create plans with specific size and versions we recommend setting `cores`, `storage_gb` and
`mysql_version` properties.

<p class="note">
  <strong>Note:</strong> If you set a parameter at plan level, developers cannot
  change the value when creating or updating service instances.
</p>

## <a id="parameters"></a> Configuration Parameters

You can provision a service by running:

```bash
cf create-service csb-google-mysql PLAN-NAME SERVICE-INSTANCE-NAME -c '{"PARAMETER-NAME": "PARAMETER-VALUE"}'
```

You can update the configuration parameters for a service instance by running:

```bash
cf update-service SERVICE-INSTANCE-NAME -c '{"PARAMETER-NAME": "PARAMETER-VALUE"}'
```

The table below lists the parameters that you can configure, using the `-c` flag, when
provisioning a csb-google-mysql service:

<table>
  <thead>
    <tr>
      <th width="20%">Parameter Name</th>
      <th width="10%">Type</th>
      <th width="40%">Description</th>
      <th width="20%">Default</th>
      <th width="10%">Operation</th>
    </tr>
  </thead>
  <tr>
    <td><code>cores</code></td>
    <td>string</td>
    <td>
      (Required unless defined in plan) Minimum number of cores for service instance, 2&ndash;64, multiples of 2.
    </td>
    <td><code>2</code></td>
    <td>provision and update</td>
  </tr>
  <tr>
    <td><code>storage_gb</code></td>
    <td>number</td>
    <td>
      (Required unless defined in plan) Size of storage volume for service instance, 10&ndash;4096&nbsp;GB.
    </td>
    <td><code>10</code></td>
    <td>provision and update</td>
  </tr>
  <tr>
    <td><code>instance_name</code></td>
    <td>string</td>
    <td>Name for the mysql instance.</td>
    <td><code>csb-mysql-INSTANCE-ID</code></td>
    <td>provision</td>
  </tr>
  <tr>
    <td><code>db_name</code></td>
    <td>string</td>
    <td>Name for the database.</td>
    <td><code>csb-db</code></td>
    <td>provision</td>
  </tr>
  <tr>
    <td><code>region</code></td>
    <td>string</td>
    <td>
      The region of the MySQL instance.
    </td>
    <td><code>us-central1</code> </td>
    <td>provision</td>
  </tr>
  <tr>
    <td><code>authorized_network</code></td>
    <td>string</td>
    <td>
      The name of the Google Compute Engine network to which the instance is connected.
    </td>
    <td><code>default</code> </td>
    <td>provision</td>
  </tr>
  <tr>
    <td><code>authorized_network_id</code></td>
    <td>string</td>
    <td>
      The ID of the Google Compute Engine network to which the instance is connected.
    </td>
    <td><code>""</code> </td>
    <td>provision</td>
  </tr>
  <tr>
    <td><code>credentials</code></td>
    <td>string</td>
    <td>
      The GCP credentials.
    </td>
    <td>The value the operator entered for <strong>Credentials</strong> in <%= vars.ops_manager %>.</td>
    <td>provision and update</td>
  </tr>
  <tr>
    <td><code>project</code></td>
    <td>string</td>
    <td>
      The GCP project to use.
    </td>
    <td>The value the operator entered for <strong>Project</strong> in <%= vars.ops_manager %>.</td>
    <td>provision and update</td>
  </tr>
</table>

## <a id="binding-creds"></a> Binding Credentials

You can bind a service by running:

```bash
cf bind-service APP-NAME SERVICE-INSTANCE --binding-name BINDING-NAME
```

The format for binding credentials for Google MySQL is as follows:

```json
{
    "name" : "DATABASE-NAME",
    "hostname" : "DATABASE-SERVER-HOST",
    "port" : "DATABASE-SERVER-PORT",
    "username" : "AUTHENTICATION-USERNAME",
    "password" : "AUTHENTICATION-PASSWORD",
    "use_tls" : false,
    "uri" : "DATABASE-CONNECTION-URI",
    "jdbcUrl" : "JDBC-FORMAT-CONNECTION-URI"
}
```
