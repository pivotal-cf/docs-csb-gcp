---
title: Google Pub/Sub Reference
owner: Cloud Service Broker
---

<strong><%= modified_date %></strong>

This topic gives you reference information about the Google Pub/Sub service
(csb-google-pubsub).
It details the plans, configuration parameters, and binding credentials.

## <a id="plans-config"></a> Plan Configuration Parameters

When configuring <%= vars.product_short %>, you can add additional plans.
For how to configure plans, see
[Configure Services with Cloud Service Broker for GCP](../installing-with-gcp.html#services).

The following table lists parameters that can only be configured for additional plans.

| Parameter Name    | Values                                                                           | Default |
|-------------------|----------------------------------------------------------------------------------|---------|
| `name`*           | The plan name                                                                    | _n/a_   |
| `id`*             | A unique GUID                                                                    | _n/a_   |
| `description`*    | Description of the new plan                                                      | _n/a_   |
| `free`            | When false, Service Instances of this Service Plan have a cost                   | true    |
| `bindable`        | Specifies whether Service Instances of the Service Plan can bind to applications | true    |
| `plan_updateable` | Whether the Plan supports upgrade/downgrade/sidegrade to another version         | true    |

<sup>*</sup> Required

You can also add any of the configuration parameters listed in the [parameters](#parameters) section to your plan.

<p class="note">
<span class="note__title">Note</span> If you set a parameter at plan level, developers cannot
  change the value when creating or updating service instances.
</p>

## <a id="parameters"></a> Configuration Parameters

You can provision a service by running:

```bash
cf create-service csb-google-pubsub PLAN-NAME SERVICE-INSTANCE-NAME -c '{"PARAMETER-NAME": "PARAMETER-VALUE"}'
```

You can update the configuration parameters for a service instance by running:

```bash
cf update-service SERVICE-INSTANCE-NAME -c '{"PARAMETER-NAME": "PARAMETER-VALUE"}'
```

The following table lists the parameters that you can configure, by using the `-c` flag, when
provisioning a csb-google-pubsub service:

<table>
  <thead>
    <tr>
      <th width="20%">Parameter Name</th>
      <th width="10%">Type</th>
      <th width="40%">Description</th>
      <th width="20%">Default</th>
      <th width="10%">Operation</th>
    </tr>
  </thead>
  <tr>
    <td><code>topic_name</code></td>
    <td>string</td>
    <td>
      The name of the topic to create.
    </td>
    <td><code>csb-topic-INSTANCE-ID</code></td>
    <td>provision and update</td>
  </tr>
  <tr>
    <td><code>subscription_name</code></td>
    <td>string</td>
    <td>
      The name of the subscription to create and associate to the topic.
      If it is not specified, then no subscription is created.
    </td>
    <td><code>""</code></td>
    <td>provision</td>
  </tr>
  <tr>
    <td><code>ack_deadline</code></td>
    <td>integer</td>
    <td>
      Subscription config - This value is the maximum time after a subscriber receives a message before the subscriber must acknowledge the message (10-600 seconds).
    </td>
    <td><code>10</code></td>
    <td>provision and update</td>
  </tr>
  <tr>
    <td><code>push_endpoint</code></td>
    <td>string</td>
    <td>
      Subscription config- A URL locating the endpoint to which messages should be pushed. If this is set, push delivery is used with this subscription; otherwise, the subscription has pull delivery.
    </td>
    <td><code>""</code></td>
    <td>provision and update</td>
  </tr>
  <tr>
    <td><code>topic_message_retention_duration</code></td>
    <td>string</td>
    <td>
      Duration to retain messages in the topic if no subscription is attached. For example, "604800s" for 7 days.
    </td>
    <td><code>""</code></td>
    <td>provision and update</td>
  </tr>
  <tr>
    <td><code>topic_kms_key_name</code></td>
    <td>string</td>
    <td>
      KMS key name for encryption. The expected format is <code>projects/*/locations/*/keyRings/*/cryptoKeys/*</code>
      <a href="#topic_kms_key_name-details">Learn more about setting this property</a>.
    </td>
    <td><code>""</code></td>
    <td>provision and update</td>
  </tr>
  <tr>
    <td><code>subscription_message_retention_duration</code></td>
    <td>string</td>
    <td>
      Duration to retain unacknowledged messages in the subscription.
      If <code>subscription_retain_acked_messages</code> is true, then this also configures the retention of
      acknowledged messages, and thus configures how far back in time a subscriptions.seek can be done.
    </td>
    <td><code>""</code></td>
    <td>provision and update</td>
  </tr>
  <tr>
    <td><code>subscription_retain_acked_messages</code></td>
    <td>boolean</td>
    <td>
      Retain acknowledged messages. If true, messages are not expunged from the subscription's
      backlog, even if they are acknowledged, until they fall out of the <code>messageRetentionDuration</code> window.
    </td>
    <td><code>false</code></td>
    <td>provision and update</td>
  </tr>
  <tr>
    <td><code>subscription_expiration_policy</code></td>
    <td>string</td>
    <td>
      Duration after which the subscription expires if no messages are received. For example, "604800s" for 7 days.
      If <code>expirationPolicy</code> is not set, a default policy with ttl of 31 days is used. If it is
      set with <code>""</code>, the resource never expires. The minimum allowed value is 1 day.
      Once a subscription's policy is set, it cannot be unset.
    </td>
    <td><code>null</code></td>
    <td>provision and update</td>
  </tr>
  <tr>
    <td><code>subscription_retry_policy_minimum_backoff</code></td>
    <td>string</td>
    <td>
      The minimum delay between consecutive deliveries of a given message. For example, "10.5s". When setting
      <code>subscription_retry_policy_minimum_backoff</code> and <code>subscription_retry_policy_maximum_backoff</code>,
      a policy establishes how Pub/Sub retries message delivery for the subscription.
      If the group of properties is not set, the default retry policy is applied. This generally implies
      that messages are retried as soon as possible for healthy subscribers.
    </td>
    <td><code>""</code></td>
    <td>provision and update</td>
  </tr>
  <tr>
    <td><code>subscription_retry_policy_maximum_backoff</code></td>
    <td>string</td>
    <td>
      The maximum delay between consecutive deliveries of a given message. For example, "15.5s". When setting
      <code>subscription_retry_policy_minimum_backoff</code> and <code>subscription_retry_policy_maximum_backoff</code>,
      a policy establishes how Pub/Sub retries message delivery for the subscription.
      If the group of properties is not set, the default retry policy is applied. This generally implies
      that messages are retried as soon as possible for healthy subscribers.
    </td>
    <td><code>""</code></td>
    <td>provision and update</td>
  </tr>
  <tr>
    <td><code>subscription_enable_message_ordering</code></td>
    <td>boolean</td>
    <td>
      Enable message ordering for the subscription.
    </td>
    <td><code>false</code></td>
    <td>provision and update</td>
  </tr>
  <tr>
    <td><code>subscription_enable_exactly_once_delivery</code></td>
    <td>boolean</td>
    <td>
      Enable exactly-once delivery for the subscription.
    </td>
    <td><code>false</code></td>
    <td>provision and update</td>
  </tr>
  <tr>
    <td><code>credentials</code></td>
    <td>string</td>
    <td>
      The GCP credentials.
    </td>
    <td>The value the operator entered for <strong>Credentials</strong> in <%= vars.ops_manager %>.</td>
    <td>provision and update</td>
  </tr>
  <tr>
    <td><code>project</code></td>
    <td>string</td>
    <td>
      The GCP project to use.
    </td>
    <td>The value the operator entered for <strong>Project</strong> in <%= vars.ops_manager %>.</td>
    <td>provision and update</td>
  </tr>
</table>

### <a id="topic_kms_key_name-details"></a>  Setting the `topic_kms_key_name` Property

  Pub/Sub uses a Google Cloud service account to access Cloud KMS. The service account
  is maintained internally by Pub/Sub for each project, and is not visible on your
  list of service accounts. The service account has the form
  <code>service-${PROJECT_NUMBER}@gcp-sa-pubsub.iam.gserviceaccount.com</code>.
  For the CMEK feature to work, you must grant this account the Cloud KMS CryptoKey `Encrypter/Decrypter`
  role in Identity and Access Management.
  See the [Google Cloud documentation](https://cloud.google.com/pubsub/docs/encryption) for more information.

  To find your project number, run the following command:  

  ```bash
  gcloud projects list --filter="$(gcloud config get-value project)" --format="value(PROJECT_NUMBER)"
  ```

    To grant the Pub/Sub service account the Cloud KMS CryptoKey `Encrypter/Decrypter` role, run the following command:

  ```bash
  
  # Grant the Pub/Sub service account the Cloud KMS CryptoKey
  # Encrypter/Decrypter role. This service account is different
  # from the service account you are using to authorize requests to Google Cloud.
  
  gcloud projects add-iam-policy-binding ${PROJECT_ID} --member="serviceAccount:service-${PROJECT_NUMBER}@gcp-sa-pubsub.iam.gserviceaccount.com" --role='roles/cloudkms.cryptoKeyEncrypterDecrypter'
  ```

## <a id="binding"></a> Binding

You can bind a service by running:

```console
cf bind-service APP-NAME SERVICE-INSTANCE-NAME --binding-name BINDING-NAME
```

## <a id="binding-params"></a> Binding Parameters

You can bind a service by running:

```bash
cf bind-service APP-NAME SERVICE-INSTANCE --binding-name BINDING-NAME -c '{"PARAMETER-NAME": "PARAMETER-VALUE"}'
```

The following table lists the parameters that you can configure, by using the `-c` flag, when
binding to a csb-google-pubsub service:

<table>
  <thead>
    <tr>
      <th width="20%">Parameter Name</th>
      <th width="10%">Type</th>
      <th width="40%">Description</th>
      <th width="20%">Default</th>
    </tr>
  </thead>
  <tr>
    <td><code>role</code></td>
    <td>string</td>
    <td>
      (Required) The role for the account without the "roles" prefix.
      For more information, see the <a href="https://cloud.google.com/iam/docs/understanding-roles#pub-sub-roles">Google Cloud documentation</a>.
      Your operator can override the default enumeration. Options are
      <code>pubsub.publisher</code>, <code>pubsub.subscriber</code>, <code>pubsub.viewer</code> and, 
      <code>pubsub.editor</code>.
    </td>
    <td><em>pubsub.editor</em></td>
  </tr>
  <tr>
    <td><code>credentials</code></td>
    <td>string</td>
    <td>
      The GCP credentials.
    </td>
    <td>The value the operator entered for <strong>Credentials</strong> in <%= vars.ops_manager %>.</td>
  </tr>
  <tr>
    <td><code>project</code></td>
    <td>string</td>
    <td>
      The GCP project to use.
    </td>
    <td>The value the operator entered for <strong>Project</strong> in <%= vars.ops_manager %>.</td>
  </tr>
</table>

## <a id="binding-creds"></a> Binding Credentials

Binding to a Cloud Storage bucket creates a Google Cloud service account that is granted a role
within the bucket. The role granted depends on the `role` property specified when the binding is
created.

The format for binding credentials for a Cloud Storage bucket is as follows:

```json
{
    "topic_name" : "TOPIC-NAME",
    "subscription_name" : "SUBSCRIPTION-NAME",
    "Email" : "SERVICE-ACCOUNT-EMAIL",
    "Name" : "SERVICE-ACCOUNT-NAME",
    "PrivateKeyData" : "SERVICE-ACCOUNT-PRIVATE-KEY",
    "credentials" : "SERVICE-ACCOUNT-CREDENTIALS",
    "ProjectId" : "GCP-PROJECT-ID",
    "UniqueId" : "SERVICE-ACCOUNT-UNIQUE-ID"
}
```

Where:

- `SERVICE-ACCOUNT-CREDENTIALS` is what you normally get as a file when creating service account keys
  through the CLI or web console (JSON format).
- `SERVICE-ACCOUNT-PRIVATE-KEY` is the base64-encoded private key in JSON format.
