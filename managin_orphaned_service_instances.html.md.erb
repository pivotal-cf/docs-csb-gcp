---
title: Managing Orphaned Service Instances Cloud Service Broker for GCP
owner: Cloud Service Broker
---

<strong><%= modified_date %></strong>

## Introduction

This document serves as a comprehensive guide for customers using Tanzu Cloud Service Broker
for GCP, specifically addressing the management of service instances that belongs to deactivated plans.
The primary objectives of this guide are:

- To provide clear instructions on identifying and managing instances that have become orphaned due to plan
  deactivation, ensuring that these instances remain secure and functional.
- To emphasize the importance of maintaining security standards and minimizing the attack surface for orphaned service
  instances.
- To offer practical strategies for handling these instances, including migration and transitioning to user-defined
  instances, in light of changes in service plan support and available features.
- To ensure that users are aware of the implications of plan deactivation on their service instances and the necessary
  steps to prevent potential service disruptions or security vulnerabilities.
- To guide users through the process of checking for orphaned service instances using specific command-line tools.

# Section 1: Understanding Orphaned Service Instances

In the context of the Tanzu Cloud Service Broker (CSB) for GCP and Cloud Foundry (CF) environments, it's essential to
understand what constitutes an orphaned service instance, why they occur, and the best practices for managing them.

## What Is An Orphaned Service Instance?

- **Definition**: An orphaned service instance refers to a service instance that CF recognizes as part of the CSB, but
  for which the CSB lacks the necessary information to manage effectively.
- **Implications**: Having orphaned instances in your CF environment can lead to challenges in manageability,
  upgradeability, agility, and security:
    - **Manageability**: These instances cannot have their configurations changed when required.
    - **Upgradeability**: These instances cannot be upgraded when required.
    - **Agility**: Management of these instances may become critical at inopportune moments.
    - **Security**: Inability to manage these instances can pose significant security risks, especially in situations
      requiring immediate response.

## Why Do Orphaned Instances Exist?

- **Service Removal**: Instances can become orphaned due to the removal of the service to which they belong, either for
  strategic reasons or other considerations.
- **Plan Removal**: Instances can become orphaned due to the removal of plans, either for strategic reasons or other
  considerations.
- **Custom Plan Changes**: Upgrades in the CSB could lead to the removal of old custom plans, which could also result in
  orphaned instances.
- **Plan ID Changes**: Altering the Plan ID in the service catalog can lead to the treatment of existing resources as
  different, resulting in orphaned instances. This is because the CSB views the modified Plan ID as a new resource,
  disconnecting it from its original configuration and management context.

## Recommended Actions For Orphaned Instances

- **Regular Health Checks**: Consistently monitor your CF environment for orphaned instances.
    - For instances related to unavailable custom plans, refer to the upgrade instructions specific to those plans and
      CSB version.
    - If plans were removed for other reasons, consider manual data migration. Reference the migration examples in the
      CSB documentation for guidance.
- **Database Management**: Periodically purge CF database to remove stale or irrelevant data.
- **Do Not Ignore Orphaned Instances**:
    - **Upgrade Challenges**: Ignoring orphaned instances during CSB updates may lead to a non-healthy environment.
      Subsequent upgrade instructions for custom plans related to orphaned instances may become ineffective,
      necessitating manual data migration.

# Section 2: Identifying and Managing Orphaned Service Instances

This section provides guidance on identifying service instances that have become orphaned in the CSB for GCP and CF
environments.
Understanding and addressing these instances is crucial for maintaining security, manageability, upgradeability, and
agility.

## Identifying Disconnected Instances

- **Using CLI Tools**: Utilize Cloud Foundry CLI tools to identify orphaned instances.
    - **CLI CF `upgrade-all-services` plugin - Flag `-check-deactivated-plans`**: This specific flag can be used to
      check for instances linked to deactivated plans.
    - Refer to documentation for more information:
        - [Cloud Foundry CLI Reference Guide - Install CLI Plugin](https://cli.cloudfoundry.org/en-US/v7/install-plugin.html).
        - [Cloud Foundry Documentation - Using a CF CLI Plugin](https://docs.cloudfoundry.org/cf-cli/use-cli-plugins.html).
        - [Cloud Foundry Community - CF CLI UpgradeAllServices Plugin](https://plugins.cloudfoundry.org/#UpgradeAllServices).
        - [UpgradeAllServices CLI Plugin on GitHub - Flags](https://github.com/cloudfoundry/upgrade-all-services-cli-plugin).
    - **Plugin Installation**: To further clarify the installation of the plugin, the following code example is provided
      ```shell
      # Example code to demonstrate plugin installation
      cf install-plugin -r CF-Community "UpgradeAllServices"
      ```
    - **Example of Execution**: To further clarify the use of the plugin, the following code example is provided
      ```shell
      # Example code to demonstrate plugin usage
      cf upgrade-all-services <broker_name> -check-deactivated-plans
      ```
    - **Example of Log**: To further clarify the use of the plugin, the following execution example is provided
      ```shell
      âœ“ cf upgrade-all-services csb-broker-dev -check-deactivated-plans                                              
      2024-01-16T14:34:43Z: discovering service instances for broker: csb-broker-dev
      2024-01-16T14:34:43Z: skipping instance: "bucket-dev" guid: "1fe84e95-21c0-4acd-9bd9-6f2796971e46" Deactivated Plan: "default" Offering: "csb-google-storage-bucket" Offering guid: "837f5ff6-5765-44a0-8b78-d7e3ebc8d428" Upgrade Available: false Last Operation Type: "create" State: "succeeded"
      upgrade-all-services plugin failed: discovered deactivated plans associated with instances. Review the log to collect information and restore the deactivated plans or create user provided services
      ```
- **Revision of Logs From Previous Installations**: When installing the Tile, CF logs a message when it detects
  instances created with plans that are not present in the CSB catalog.
    - **Example of Log**:
      ```shell
      Warning: Service plans are missing from the broker's catalog (https://YOUR_CLOUD_SERVICE_BROKER_URL/v2/catalog) but can not be removed from Cloud Foundry while instances exist. The plans have been deactivated to prevent users from attempting to provision new instances of these plans. ....
      ``` 

# Section 3: Strategies for Handling Orphaned Instances

Section 3 is dedicated to outlining the steps and strategies necessary for effectively managing and resolving issues
related to orphaned service instances in CSB for GCP and CF environments.

## Steps for Addressing Orphaned Instances

1. **Conduct a Health Check of your CF environment**:
    - Regularly monitor your CF environment for orphaned instances.
    - Follow specific upgrade instructions if the orphaned instances are related to custom plans.
    - For instances orphaned due to other reasons, plan a manual migration, using the documentation as a reference.

2. **Database Maintenance**:
    - Periodically purge CF database to maintain a clean and efficient environment.
        - Orphaned service instances that you do not want to manage with the CSB must be deleted from the CF database.
    - Refer to the next article for obtaining more information about deleting orphaned service instances.
        - [How to delete orphaned service instances derived from service brokers in Operations Manager](https://community.pivotal.io/s/article/How-to-delete-orphaned-service-instances-derived-from-service-brokers?language=en_US)
        - **Example of execution**: `cf purge-service-instance mysql-dev`

3. **Avoiding Old Workarounds**:
    - Do not attempt to rejoin instances to the broker by recreating plans. This method is outdated and no longer
      supported, especially with the removal of unsupported Terraform binaries from the broker.

## Migrating Orphaned Instances

- **Creating New Instances**:
    - Migrate data by creating new instances in the broker.
    - Refer to Migration Guidelines:
        - [Migration Guidelines for MySQL Instances](./gcp-mysql-migration.html.md.erb) for detailed steps.
        - [Migration Guidelines for PostgreSQL Instances](./gcp-postgres-migration.html.md.erb) for detailed steps.
        - [Migration Guidelines for Google Storage Bucket Instances](./gcp-storage-migration.html.md.erb) for detailed steps.

- **Moving to User-Provided Instances**:
    - Alternatively, consider moving orphaned instances to user-defined instances.
    - Manage these directly through the IaaS console for better control and customization.
    - Refer to documentation for more information:
        - [CF CLI Reference Guide for creating User-provided services instances](https://cli.cloudfoundry.org/en-US/v8/create-user-provided-service.html).
        - [TAS documentation for User-provided service instances](https://docs.vmware.com/en/VMware-Tanzu-Application-Service/5.0/tas-for-vms/services-user-provided.html).
        - [CF DevGuide for User-provider service instances](https://docs.cloudfoundry.org/devguide/services/user-provided.html).

## Implications of Ignoring Orphaned Instances

- Neglecting orphaned instances during CSB updates can lead to a non-healthy environment.
- Upgrade instructions for custom plans related to orphaned instances may become ineffective, necessitating manual
  migration.

# Conclusion

Throughout this documentation, we have addressed the crucial aspects of managing orphaned service instances within the
Tanzu Cloud Service Broker for GCP and Cloud Foundry environments. The key takeaways include:

## Understanding the Significance

- **Orphaned Instances Defined**: Disconnected service instances are those recognized by CF but cannot be managed by the
  CSB due to missing information.
- **Risks and Challenges**: These instances pose significant risks in terms of manageability, upgradeability, agility,
  and security. Their presence can hinder system updates, configuration changes, and timely response to security
  threats.

## Proactive Steps and Best Practices

- **Identifying Instances**: Regularly use Cloud Foundry CLI tools to check for orphaned instances, especially using
  the `UpgradeAllServices` plugin with the `-check-deactivated-plans` flag.
- **Root Causes**: Instances become orphaned primarily due to plan removals, changes in custom plans, or altering Plan
  IDs.
- **Effective Management**: It involves regular health checks, database purging, and avoiding outdated methods like
  recreating plans to rejoin instances to the broker.

## Migration and Resolution Strategies

- **Migrating Orphaned Instances**: Emphasize migrating data to new instances within the broker or moving to
  user-provided instances, with detailed guidelines provided in the CSB documentation.
- **Avoiding Complications**: Ignoring orphaned instances, especially during CSB updates, can lead to an unhealthy
  environment and complicated upgrade processes.

## Final Thoughts

Managing orphaned service instances is an essential aspect of maintaining a secure, agile, and manageable cloud
environment. By following the strategies and guidelines outlined in this document, users can ensure their CF
environments remain robust and responsive to changing needs and potential security risks.

For further information and updates, refer to:

- [Cloud Foundry Managing Service Brokers](https://docs.cloudfoundry.org/services/managing-service-brokers.html)
- [Cloud Service Broker GitHub Repository - Docs](https://github.com/cloudfoundry/cloud-service-broker/tree/main/docs)
- [Open Service Broker API Specification](https://github.com/openservicebrokerapi/servicebroker/blob/v2.14/spec.md)
    - [Open Service Broker API Specification - Catalog Management](https://github.com/openservicebrokerapi/servicebroker/blob/v2.14/spec.md#catalog-management)
