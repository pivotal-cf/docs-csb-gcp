---
title: Installing and Configuring Cloud Service Broker for GCP
owner: Cloud Service Broker
---

<strong><%= modified_date %></strong>

This topic describes how to install and configure <%= vars.product_full %>.

## <a id="prereq"></a> Prerequisites for Installing <%= vars.product_short %>

Before you install <%= vars.product_short %>, you must have:

* **A small MySQL database:** This database is used as the _state database_. The broker requires this database to store its state.
* **GCP service account credentials:** A project and account to provision the services that this broker manages. Service account JSON credentials are required to configure this broker.
* **GCP-enabled APIs:** Enable the services you need by enabling the relevant APIs in **APIs and services** > **Library**. These services and APIs are listed in the following table.

    | Service                       | Necessity | API to enable |
    |-------------------------------|-----------|---------------|
    | Google Cloud Resource Manager | Required | [Google Cloud Resource Manager API](https://console.cloud.google.com/apis/api/cloudresourcemanager.googleapis.com/overview) |
    | Google Identity and Access Management (IAM) | Required | [Google Identity and Access Management (IAM) API](https://console.cloud.google.com/apis/api/iam.googleapis.com/overview) |
    | CloudSQL as a service (MySQL and PostgreSQL) | Optional | [CloudSQL API](https://console.cloud.google.com/apis/library/sql-component.googleapis.com), [CloudSQL Admin API](https://console.developers.google.com/apis/api/sqladmin.googleapis.com/overview), and [Service Networking API](https://console.cloud.google.com/apis/library/servicenetworking.googleapis.com) |
    | Cloud Storage as a service | Optional | [Cloud Storage API](https://console.cloud.google.com/apis/api/storage_component/overview) |
    | Redis as a service | Optional | [Redis API](https://console.cloud.google.com/apis/library/redis.googleapis.com) |
    | Dataproc as a service | Optional | [Dataproc API](https://console.developers.google.com/apis/api/dataproc.googleapis.com/overview) |
    | Cloud Spanner as a service | Optional | [Cloud Spanner API](https://console.developers.google.com/apis/api/spanner.googleapis.com/overview) |

    For more information about the API library, see the [GCP documentation](https://console.cloud.google.com/apis/library).

## <a id="install"></a> Install <%= vars.product_short %>

To install the <%= vars.product_short %> using <%= vars.ops_manager %> Installation Dashboard:

1. Download the product file from
[<%= vars.product_network %>](https://network.pivotal.io/products/cloud-service-broker-gcp/).

1. Navigate to the <%= vars.ops_manager %> Installation Dashboard and click **Import a Product** to
upload the product file.

1. Under **Import a Product**, click **+** next to the version number of <%= vars.product_short %>
in the left sidebar. This adds the tile to your staging area.

1. Click the newly added **<%= vars.product_short %>** tile.

## <a id="config-gcp"></a> Configure the <%= vars.product_short %>

The following procedures describe configuring the panes on the <%= vars.product_short %> tile.


### <a id="config-azs"></a> Configure AZs and Networks

This section describes how to choose an AZ to run the service broker for <%= vars.product_short %>.
It also describes how to select networks for <%= vars.product_short %>.

To configure AZs and networks:

1. Click **Assign AZs and Networks**.

1. Configure the fields as follows:

    | Field | Instructions |
    |-------|----------------|
    | Place singleton jobs in | Select the AZ in which the broker VM for <%= vars.product_short %> runs. The broker runs as a singleton job. |
    | Balance other jobs in | Select the AZs in which other jobs can run. |
    | Network | Select a subnet for the <%= vars.product_short %> broker. This is typically the same subnet that includes the component VMs for <%= vars.app_runtime_full %> (<%= vars.app_runtime_abbr %>). |

1. Click **Save**.

### <a id="config-creds"></a> Configure GCP Credentials

This section describes how to configure the GCP credentials that <%= vars.product_short %> requires to
manage service instances.

To configure GCP credentials:

1. Click **GCP Config**.

1. Configure the fields as follows:

    | Field | Instructions |
    |-------|--------------|
    | Root Service Account JSON | Enter JSON service account |
    | GCP project | Enter project name |
    | Authorized Network ID | ID of the VPC network to connect instances to. It looks similar to `https://www.googleapis.com/compute/v1/projects/...` |
    | Region | Enter the default GCP region for provisioning service instances |

1. Click **Save**.

<p class="note">
  <strong>Note:</strong> <%= vars.product_short %> services are validated using the same GCP project and region
  for <%= vars.app_runtime_full %> (<%= vars.app_runtime_abbr %>) and <%= vars.product_short %>. In other
  configurations, make sure that <%= vars.app_runtime_abbr %> apps have network connectivity to the services
  managed by <%= vars.product_short %>.
</p>

### <a id="state-db"></a>Configure a State Database

This section describes how to associate <%= vars.product_short %> with a MySQL database,
the _state database_.

#### About Encrypting the State Database

In production environments, VMware recommends that you enable encryption.
This encrypts certain sensitive information in the state database, such as IaaS credentials.
The encryption password that you enter on the Service Broker Config pane is used to generate an encryption key.

<p class="note">
<strong>Note:</strong>
VMware recommends that backup and restore capabilities are enabled in the MySQL database before attempting encryption.
</p>

<p class="note">
<strong>Note:</strong>
Applying changes takes longer than normal when you first enable encryption and when you change the
encryption password.
</p>

#### Prerequisite

You must have a small MySQL database to use as the state database.

#### Procedure: Configure a State Database

To configure <%= vars.product_short %> with a database:

1. Click **Service Broker Config**.

    <%= image_tag("images/service-broker-config-pane.png", :alt => "Fields for configuring the service broker.
  See the following steps for detailed descriptions of the configurable fields.", :width => "400") %>

1. Configure the fields as follows:

    | Field | Instructions |
    |-------|--------------|
    | **Database host** | Enter the host name of the prerequisite state database.|
    | **Database username** and **Database password** | Enter the credentials for the state database. The example shown in the screenshot in the previous step refers to setting the username for a MySQL tile provisioned database. If you are configuring a database provisioned by another service, refer to the documentation for that service for the correct username format. For Cloud SQL for MySQL, see the [GCP documentation](https://cloud.google.com/sql/docs/mysql/admin-tools#workbench). |
    | **Database port** | Enter the port number for connection to the state database. It is `3306` by default. |
    | **Database name** | Enter the name of an existing database to use as the state database.|
    | **TLS Enforcement** | Select the type of TLS enforcement you want. If you select **Custom**, enter your CA certificate, client certificate, and key. |
    | **Enable encryption of the Cloud Service Broker database**| If you want the sensitive data to be encrypted, select this checkbox and the **Add** button. If you do not want to encrypt the date, leave the checkbox unselected and do not fill in the Database Encryption Passwords fields.|
    | **Label**| Enter a unique password label. You cannot change this label after you save.|
    | **Password**| Enter a secure password that is at least 20 characters long. You cannot change this password after you save.|
    | **Primary**| Select this checkbox if this is the password that you want to use to encrypt the data. You must mark one and only one password as primary.|

1. Click **Save**.

1. Return to the <%= vars.ops_manager %> Installation Dashboard.

1. Click **Review Pending Changes**.

1. Click **Apply changes** to install the <%= vars.product_short %> tile.

### <a id="services"></a> Configure Services with <%= vars.product_short %>

This section describes how to configure services and service plans offered by the
<%= vars.product_short %> within the Cloud Foundry Marketplace on your instance of Cloud Foundry.

<%= vars.product_short %> specifies new service plans by using JSON.
An example is provided, using the smallest possible size, within each service.

To configure services and service plans:

1. Click the already-installed <%= vars.product_short %> tile in your
<%= vars.ops_manager %> tile Dashboard.

1. Find the service you want to make available in the left navigation under
the **Settings** tab.

1. Enter additional plans as additional JSON objects within the provided field.
For details about properties for each service configuration, see
<a href="reference/index.html">Service Plan Reference</a>.

    <p class="note">
        <strong>Note:</strong> When developers create or update a service instance, they cannot override
        any plan-level properties that were set in this field.
    </p>

1. (Optional) To use different credentials to the ones specified in the **GCP Config** tab,
supply the credentials as properties to a plan instance in the additional plans box:

    ```json
    [
      {
        "name" : "PLAN-NAME",
        "id" : "UUID",
        "description" : "PLAN-DESCRIPTION",
        "credentials" : "GCP-JSON-CREDENTIAL",
        "project" : "GCP-PROJECT",
        ...
      }
    ]
    ```

1. Click **Save**.

1. Return to the <%= vars.ops_manager %> Installation Dashboard and click **Review Pending Changes**.

1. Click **Apply changes**.

1. Review your Cloud Foundry Marketplace to see the new plan sizes.

### <a id="config-flags"></a> Configure Feature Flags

This section describes how to enable feature flags for <%= vars.product_short %>.

To configure Feature Flags:

1. Click **Feature Flags**.

1. By default the `enable-beta-services` flag is false.
To enable all services tagged as beta, select the check box.

1. Click **Save**.

## <a id="rotate-password"></a>Rotate the Encryption Password on the State Database

If you have already set an encryption password and want to change it, follow the instructions below:

To rotate the password on the state database:

1. Click **Service Broker Config**.

2. Clear the **Primary** checkbox.

3. Click **Add**.

4. Enter a new **Label** and **Password** for the new password, and select  **Primary**.

    You cannot change the label or password after you save.

1. Click **Save**.

1. Return to the <%= vars.ops_manager %> Installation Dashboard.

1. Click **Review Pending Changes**.

1. Click **Apply changes** to install the <%= vars.product_short %> tile.

1. (Recommended) After the apply changes process completes, delete the non-primary label and password pair and apply changes again.

## <a id="remove-encryption"></a> Remove Encryption from the State Database

If the data in the state database was previously encrypted and you want to disable encryption, follow the instructions below.

To remove encryption from the state database:

1. Click **Service Broker Config**.

2. Clear the **Enable encryption of the Cloud Service Broker database** checkbox.

4. Clear the **Primary** checkbox, but do not change the Label or Password fields.

1. Click **Save**.

1. Return to the <%= vars.ops_manager %> Installation Dashboard.

1. Click **Review Pending Changes**.

1. Click **Apply changes** to install the <%= vars.product_short %> tile.

1. (Recommended) After the apply changes process completes, delete all label and password pairs and apply changes again.
