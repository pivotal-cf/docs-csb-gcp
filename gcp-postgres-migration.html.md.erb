---
title: Migrating to an Google Cloud SQL for PostgreSQL Instance
owner: Cloud Service Broker for GCP
---

<strong><%= modified_date %></strong>

This topic describes migrating from GCP Relational Database Service (Google Cloud SQL) for
PostgreSQL Instance of the VMware Tanzu Service Broker for GCP tile
to the <%= vars.product_full %> tile.

## <a id='about'></a> About Migrating Data to Google Cloud SQL for PostgreSQL Instance

Because the VMware Tanzu Service Broker for GCP (hereafter: "the legacy broker") tile
is going out of support, it is important to move from PostgreSQL instances that
were created by the legacy broker over to the <%= vars.product_short %>.

The <%= vars.product_short %> plans are configurable.
When migrating, examine the configuration of the plans in use with the legacy broker and create
matching plans in the <%= vars.product_short %>.

You can use the GCP Database Backup and Restore functionality to migrate data between Google Cloud SQL for PostgreSQL Instances.
The tool copies data from one database to another.
Because the original database is not modified, you can reverse the migration if you detect any problems.

### <a id='configuration'></a> Matching Configuration

Both the legacy broker and the <%= vars.product_short %> allow you to customize service plans.
Create plans in the <%= vars.product_short %> that match the plans used in the legacy broker.
It is mandatory for the new Service Instances to be created with the same major version of Postgres as the old instances and with the same (or larger) available disk size.
It may be useful to create a test service instance and compare the properties in the GCP console.
For instructions on how to configure plans, see
[Configure Services with Cloud Service Broker for GCP](installing-with-gcp.html#services).

### <a id='migration'></a> Migrating Data

You might want to migrate data from instances created with the legacy broker to instances
created with the <%= vars.product_short %>.

<p class="note important">
  <strong>Important:</strong> Migration of data might incur app downtime.
  The amount of downtime depends on the method chosen.
</p>

There are many options for performing data migration which include [GCP SQL Backup and Restore](https://cloud.google.com/sql/docs/postgres/backup-recovery/restoring),
manual data migration, and options available from other vendors.
For more information about the data migration process, refer to the documentation for the option that you choose.

In general, the data migration steps are:

1. Create a backup of the PostgreSQL instance.
1. Create an Google Cloud SQL for PostgreSQL instance using the <%= vars.product_short %>.
1. Restore a backup of the data from a legacy broker PostgreSQL instance into the newly created instance.
1. Unbind apps from the legacy broker PostgreSQL instance and bind them to the newly created instance.
1. After migration is complete, you can stop on-going migration and optionally delete
the legacy broker PostgreSQL instance.

For more detailed steps showing the Cloud Foundry and `gcloud` commands necessary to use GCP SQL Backup and Restore,
see [Migrate Data to a VMware Tanzu Service Broker for GCP PostgreSQL Instance](#steps).

## <a id='steps'></a> Migrate Data to a VMware Tanzu Service Broker for GCP PostgreSQL Instance

To migrate data from an existing legacy PostgreSQL instance to the <%= vars.product_short %>:

1. Create a backup of the legacy PostgreSQL instance.

1. Get OLD_INSTANCE_ID for the legacy PostgreSQL instance details by running:

    ```console
    cf env APP-USING-LEGACY-SERVICE-INSTANCE
    ```

    Where is `APP-USING-LEGACY-SERVICE-INSTANCE` is the name of an app that is bound to a
    service instance from the legacy broker. Inspect the `VCAP_SERVICES` JSON
    it will contain a property named `database_name`, this is your OLD_INSTANCE_ID.

1. Create a new PostgreSQL service instance using <%= vars.product_short %>.

1. Create a service key in the new PostgreSQL service by running:

    ```console
    cf create-service-key SERVICE-INSTANCE-NAME SERVICE-KEY-NAME
    ```

    Where `SERVICE-INSTANCE-NAME` is the name of the new PostgreSQL service instance and
    `SERVICE-KEY-NAME` is a name that you choose for the service key.

1. Get credentials from the service key by running:

    ```console
    cf service-key SERVICE-INSTANCE-NAME SERVICE-KEY-NAME
    ```

    Inspect the JSON output for it will contain a property named `name`, this is your NEW_INSTANCE_ID.

1. Create a backup of the old service instance, for example, by using GCP Backup and Restore functionality.
   E.g via 
   ```
   gcloud sql backups create -i <OLD_INSTANCE_ID>
   ```

1. Find the BACKUP_ID for the backup you just created
   E.g. via
   ```
   gcloud sql backups list -i <OLD_INSTANCE_ID>
   ```

1. Restore the backup of the old service instance into the new Service Instance. 
   E.g via 

   ```
     gcloud sql backups restore <BACKUP_ID> --restore-instance=<NEW_INSTANCE_ID> --backup-instance=<OLD_INSTANCE_ID>
   ```

1. Disconnect the app from the legacy service binding by running:

    ```console
    cf unbind-service APP-NAME LEGACY-SERVICE-INSTANCE
    ```

    Where:

    * `APP-NAME` is the app using the PostgreSQL instance.
    * `LEGACY-SERVICE-INSTANCE` is the name of the VMware Tanzu Service Broker for GCP-brokered PostgreSQL instance.

    For example:

    <pre class="terminal">
    $ cf unbind-service my-app my-old-instance
    </pre>

1. Bind the app to the new service instance by running:

    ```console
    cf bind-service APP-NAME NEW-SERVICE-INSTANCE
    ```

    Where `NEW-SERVICE-INSTANCE` is the name of the <%= vars.product_short %> service instance
    that you created in step 2 above.

    For example:

    <pre class="terminal">
    $ cf bind-service my-app my-csb-gcp-instance
    </pre>

    Because <%= vars.product_short %> creates new credentials at bind time,
    this creates new binding credentials for the app.

1. Restage the app:

    ```console
    cf restage APP-NAME
    ```

1. After the migration is successful, you can stop continuous migration and remove
the legacy service instance.
